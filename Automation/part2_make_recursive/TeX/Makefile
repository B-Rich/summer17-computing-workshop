# Here we use a recursively invoke make to generate an article.
# The article uses figures generated by the simulation earlier

# The target of the article is `article'
article: spinprecession.tex bloch.pdf exp_sigma.pdf
	latexmk -pdf spinprecession.tex

# This target is the figure showing the spin precession
# on the Bloch sphere. We simply copy the file from
# the Python output.
bloch.pdf: ../Python/bloch.pdf
	cp ../Python/bloch.pdf ./

# This target is the figure showing the expectation values
# of the Pauli operatos. We simply copy the file from
# the Python output.
exp_sigma.pdf: ../Python/exp_sigma.pdf
	cp ../Python/exp_sigma.pdf ./

# For this target, we need to recursively involve make
# in the other directory, which will generate the figures
# we need for our article.
../Python/bloch.pdf:
	echo "Recursively invoke make in ../Python."
	
# For this target, we need to recursively involve make
# in the other directory, which will generate the figures
# we need for our article.
../Python/exp_sigma.pdf:
	echo "Recursively invoke make in ../Python."
	
# Finally we have the clean target. Note that we have to recursively
# clean. Therefore, we need to invoke the other Makefile here. Note that
# note the target is not the default target but the `clean' target of the
# Makefile
clean: cleanlatex
	echo "Recursively invoke the other make file here."
	rm -rvf bloch.pdf
	rm -rvf exp_sigma.pdf
	
# This is a target which removes all files created by the latex program.
# For simplicity, we have defined a different target here. We could have put
# all these commands under the target `clean'
cleanlatex:
	rm -rvf *.dvi
	rm -rvf *.ps
	rm -rvf *.pdf
	rm -rvf *.out
	rm -rvf *.aux
	rm -rvf *.log
	rm -rvf *.toc
	rm -rvf *.fls
	rm -rvf *.nav
	rm -rvf *.lof
	rm -rvf *.log
	rm -rvf *.lot
	rm -rvf *.fdb_latexmk
	rm -rvf *.bbl
	rm -rvf *.blg
	rm -rvf *.spl
	rm -rvf *.synctex
	rm -rvf *.synctex.gz
	rm -rvf *.synctex.gz*
	rm -rvf *.pdfsync

